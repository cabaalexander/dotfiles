#!/bin/bash
# vim: ft=zsh:ts=4:sw=4

grsh(){
    # Reset hard a range of commits from git
    if [ -z "$1" ]; then
        echo "How many resets?"
        return 1
    fi
    git reset --hard HEAD~"${1}"
}

grss(){
    # Reset soft a range of commits from git
    if [ -z "$1" ]; then
        echo "How many resets?"
        return 1
    fi
    git reset --soft HEAD~"${1}"
    git reset
}

gps(){
    # Alias to push. Validated and stuffs
    local currentBranch
    currentBranch=$(gcb)

    if protected_branch "$currentBranch" "$@"; then
        return 1
    fi

    git push origin "$currentBranch" "${@}"
}

ginfo(){
    # Displays current github user, password and ssh key
    clear
    git config --global user.name
    git config --global user.email
    echo

    if [ -f ~/.ssh/id_rsa.pub ]; then
        grep -e "\scabaalexander.*$" < ~/.ssh/id_rsa.pub
        ls -l ~/.ssh/
    else
        echo ':: NO SSH AVAILABLE ::'
    fi
}

mk(){
    # Creates the directory and cd to it right away
    mkdir -p -- "$1"
    cd -P -- "$1" || return 1
}

filetypeb(){
    # To change the End lines of a file
    local INPUT_FILE=$1

    tr -d '\r' < "${INPUT_FILE}" > tmp
    mv -f tmp "${INPUT_FILE}"
}

killport(){
    # Given a port kills its process
    fuser -k "$1"/tcp
}

ee(){
    # Opens vin in current directory (And 'Session.vim' if exists)
    local FILE=$1
    clear
    if [ -f ./Session.vim ] && [ -z "${FILE}" ]
    then
        nvim -S
    else
        nvim "${@}"
    fi
}

gpr(){
    # Git rebases from origin [master]
    local BRANCH_NAME=$1
    local main_branch=$(gmain)
    git pull --rebase origin "${BRANCH_NAME:-$main_branch}"
}

gprup(){
    # Git rebases from upstream [master]
    local BRANCH_NAME=$1
    local main_branch=$(gmain)
    git pull --rebase upstream "${main_branch:-$main_branch}"
}

dotar(){
    # Compress stuff
    local NAME=${1:?"Filename required ¯\\_(ツ)_/¯ <name>.tar.gz"}
    shift
    local SOURCE=(
        "${@:?Source file(s) required ¯\\_(ツ)_/¯ <./foo ./bar>}"
    )
    echo -n "Tarring... "
    spinner tar -cpzf "${NAME}.tar.gz" "${SOURCE[*]}"
    echo "Done."
}

untar(){
    # Decompress stuff
    local NAME=${1:?"Filename required ¯\\_(ツ)_/¯ <name>.tar.gz"}
    local DIST=${2:?"Distribution folder required ¯\\_(ツ)_/¯ <./ | my/path/>"}

    [ -d "${DIST}" ] || mkdir -p "${DIST}"

    echo "Untarring... "
    spinner tar -xvpzf "${NAME}" -C "${DIST}"
    echo "Done."
}

lstar(){
    # List tar's files
    local TARGET=${1:?"Filename required ¯\\_(ツ)_/¯ <name>.tar.gz"}
    local DEPTH=${2:-0}

    tar -tf "${TARGET}" | cut -d/ -f1-$((DEPTH + 1)) | uniq
}


dkb(){
    docker build "${@:-.}"
}

pfetch(){
    # Uses `peerflix` from npm to download torrents (magnet link)
    peerflix -f . "${@:?"Provide a magnet link to start the download"}"
}

uftp(){
    local DST=${1?Mount point not provided}
    fusermount -u "$DST"
}
